# The name provides the BuildNumber variable value. Update this to have the correct major, minor, and hotfix numbers.
# Keep the $(rev:.r) as this provides the incremental build number.
name: 1.0.0$(rev:.r)

# By default, trigger a build for any changes in the 'main' branch and any branch matching 'enhancements/*' except for changes to the docs folder or the readme file
trigger:
  branches:
    include:
      - main
      - enhancements/*
  paths:
    exclude:
      - docs/*
      - README.md

pr:
  branches:
    include:
      - releases/*
  paths:
    exclude:
      - docs/*
      - README.md

parameters:
  - name: ForceNewBaseline
    displayName: Reset warnings and code coverage baseline
    type: boolean
    default: false

pool:
  name: 'Default' # This uses the agent pool maintained by the Madison DevOps team

variables:
- name: 'solution'
  value: '**/*.sln'
# This should be updated to the appropriate solution platform. Typically this will be one of: 'Any CPU', 'x64', or 'x86'
- name: 'buildPlatform'
  value: 'Any CPU'
- name: 'buildConfiguration'
  value: 'Release'
- name: JFrogBuildName
  value: 'madison-site-$(Build.DefinitionName)'
- name: BQC.ForceNewBaseline
  value: ${{parameters.ForceNewBaseline}}

stages:
  - stage: BuildStage
    displayName: Build and Test

    jobs:
    - job: Build
      displayName: Build and run unit tests

      variables:
      - group: 'Shared Build Variables' # provides some common variable values that apply to all pipelines (e.g. code signing certificate info)

      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'

      - task: JFrogToolsInstaller@1
        displayName: 'JFrog Tools Installer'
        inputs:
          artifactoryConnection: 'JFrog Releases'
          cliInstallationRepo: 'jfrog-cli/v2-jf'

      # This is required for PublishCodeCoverageResults@2
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: '7.x'

      - task: VisualStudioTestPlatformInstaller@1
        displayName: 'Install latest stable Visual Studio Test Platform'
        inputs:
          packageFeedSelector: 'nugetOrg'
          versionSelector: 'latestStable'

      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'config'
          nugetConfigPath: '$(build.sourcesDirectory)/nuget.config'

      # Commented out because we don't have all of our in-house NuGet packages in this repo yet
      # - task: JFrogNuGet@1
      #   displayName: 'JFrog NuGet restore'
      #   inputs:
      #     command: 'restore'
      #     artifactoryConnection: 'Thermo Fisher JFrog Artifactory (read-only)'
      #     targetResolveRepo: 'madison-site-nuget-dev'
      #     solutionPath: '$(solution)'
      #     collectBuildInfo: true
      #     buildName: '$(JFrogBuildName)'
      #     buildNumber: '$(Build.BuildNumber)'

      # Remove this task if there are no C++ or non-SDK .NET projects
      - task: updateVersionInfo@0
        displayName: Update Version Information
        inputs:
          includeAssemblyInfoFiles: false # Set to true if there are projects that need AssemblyInfo files
          assemblyInfoFileFilters: '**/AssemblyInfo.*'
          includeResourceFiles: true # Set to false if there are no C++ projects
          resourceFileFilters: '**/*.rc'

      - task: VSBuild@1
        displayName: 'Build solution $(solution)'
        inputs:
          solution: '$(solution)'
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
            msbuildArgs: '/p:VersionPrefix=$(Build.buildNumber)'
          ${{ else }}:
            msbuildArgs: '/p:VersionPrefix=$(Build.buildNumber) /p:VersionSuffix=alpha'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          maximumCpuCount: true

      # Remove the next 2 tasks if there are no unit tests
      - task: VSTest@3
        displayName: 'VsTest - testAssemblies'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **/*test*.dll
            !**/obj/**
            !**/*TestAdapter*.dll
            !**/*TestFramework*.dll
            !**/*TestPlatform*.dll
            !**/testcentric*.dll
          searchFolder: '$(System.DefaultWorkingDirectory)'
          resultsFolder: '$(Common.TestResultsDirectory)'
          vsTestVersion: 'toolsInstaller'
          runSettingsFile: '$(build.sourcesDirectory)\.runsettings'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'

      - task: PublishCodeCoverageResults@2
        displayName: Publish code coverage
        inputs:
          summaryFileLocation: $(Common.TestResultsDirectory)/**/*.cobertura.xml

      - task: PublishSymbols@2
        displayName: Publish symbols path
        inputs:
          SearchPattern: |
            **/bin/**/*.pdb
            ./$(buildConfiguration)/**/*.pdb # remove this line if there are no Win32 C++ projects
            ./x64/$(buildConfiguration)/**/*.pdb # remove this line if there are no x64 C++ projects
          IndexSources: false
          SymbolServerType: 'TeamServices'

      - task: BuildQualityChecks@9
        displayName: Check build quality
        inputs:
          checkWarnings: true
          warningFailOption: 'build'
          showStatistics: true
          checkCoverage: true # Set to false if there are no unit tests
          coverageFailOption: 'build'
          coverageType: 'lines'
          coveragePrecision: '1'

      # Uncomment the next 3 tasks if this build has NuGet packages to publish
      # - task: CopyFiles@2
      #   displayName: 'Copy generated NuGet packages to: $(Build.ArtifactStagingDirectory)'
      #   inputs:
      #     Contents: '**/bin/**/*.nupkg'
      #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
      #     CleanTargetFolder: true

      # - task: JFrogNuGet@1
      #   displayName: 'JFrog NuGet push'
      #   inputs:
      #     command: 'push'
      #     artifactoryConnection: 'Thermo Fisher JFrog Artifactory'
      #     targetDeployRepo: 'madison-site-nuget-dev'
      #     pathToNupkg: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      #     collectBuildInfo: true
      #     buildName: '$(JFrogBuildName)'
      #     buildNumber: '$(Build.BuildNumber)'

      # - task: NuGetCommand@2
      #   displayName: NuGet push - Dev_Architecture
      #   inputs:
      #     command: 'push'
      #     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      #     nuGetFeedType: 'internal'
      #     publishVstsFeed: 'Dev_Architecture'
      #     allowPackageConflicts: true

      - task: CopyFiles@2
        displayName: 'Copy built files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          Contents: |
              **/bin/**/$(buildConfiguration)/**
              !**/*.pdb
              !**/*.nupkg
              !**/*installer*/bin/**/*
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          CleanTargetFolder: true

      - task: JFrogGenericArtifacts@1
        displayName: 'Upload binaries to JFrog Artifactory'
        inputs:
          command: 'Upload'
          connection: 'Thermo Fisher JFrog Artifactory'
          specSource: 'taskConfiguration'
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "$(build.artifactstagingdirectory)/",
                  "target": "madison-site-generic-dev/$(Build.DefinitionName)/$(Build.BuildNumber)/Binaries/",
                  "flat": "false"
                }
              ]
            }
          replaceSpecVars: false
          collectBuildInfo: true
          buildName: '$(JFrogBuildName)'
          buildNumber: '$(Build.BuildNumber)'
          failNoOp: true

      # Uncomment the next 3 tasks if this build has installers to publish
      # - task: CopyFiles@2
      #   displayName: 'Copy installers to: $(Build.ArtifactStagingDirectory)'
      #   inputs:
      #     SourceFolder: '$(build.sourcesDirectory)/installers'
      #     Contents: '**/bin/**/*'
      #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
      #     CleanTargetFolder: true

      # - task: JFrogGenericArtifacts@1
      #   displayName: 'Upload installers to JFrog Artifactory'
      #   inputs:
      #     command: 'Upload'
      #     connection: 'Thermo Fisher JFrog Artifactory'
      #     specSource: 'taskConfiguration'
      #     fileSpec: |
      #       {
      #         "files": [
      #           {
      #             "pattern": "$(build.artifactstagingdirectory)/",
      #             "target": "madison-site-generic-dev/$(Build.DefinitionName)/$(Build.BuildNumber)/Installers/",
      #             "flat": "false"
      #           }
      #         ]
      #       }
      #     replaceSpecVars: false
      #     collectBuildInfo: true
      #     buildName: '$(JFrogBuildName)'
      #     buildNumber: '$(Build.BuildNumber)'
      #     failNoOp: true

      # - task: PublishPipelineArtifact@1
      #   displayName: 'Publish Pipeline Artifact: Installers'
      #   inputs:
      #     targetPath: '$(Build.ArtifactStagingDirectory)'
      #     artifact: 'Installers'
      #     publishLocation: 'pipeline'

      - task: JFrogPublishBuildInfo@1
        displayName: 'Publish build info to JFrog Artifactory'
        inputs:
          artifactoryConnection: 'Thermo Fisher JFrog Artifactory'
          buildName: '$(JFrogBuildName)'
          buildNumber: '$(Build.BuildNumber)'

    - job: CodeQL
      displayName: Run CodeQL

      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'

      - task: NuGetAuthenticate@1
        displayName: 'NuGet Authenticate'

      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 7.x'
        inputs:
          packageType: 'sdk'
          version: '7.x'

      - task: installCodeQL@0
        displayName: Use CodeQL

      # Change to 'csharp, cpp' if there is both C# and C++ code and 'cpp' if there is only C++ code
      - task: initCodeQL@0
        displayName: 'CodeQL initialize: csharp'
        inputs:
          languages: 'csharp'

      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          solution: $(solution)
          selectOrConfig: config
          nugetConfigPath: $(build.sourcesDirectory)/nuget.config

      - task: VSBuild@1
        displayName: 'Build solution $(solution)'
        inputs:
          solution: '$(solution)'
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
            msbuildArgs: '/p:VersionPrefix=$(Build.buildNumber)'
          ${{ else }}:
            msbuildArgs: '/p:VersionPrefix=$(Build.buildNumber) /p:VersionSuffix=alpha'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          clean: true
          maximumCpuCount: true

      - task: analyzeCodeQL@0
        displayName: CodeQL analyze
        inputs:
          numcores: 0

  # Uncomment this entire stage if this build has installers to publish to part numbers
  # - stage: PackageStage
  #   displayName: Package Part Numbers

  #   jobs:
  #   - job: GenerateArtifacts
  #     displayName: Generate Part Number Artifacts

  #     steps:
  #     # Copy this task as many times as needed for the part numbers generated by this build. Update the details as appropriate
  #     - task: generatePartNumber@0
  #       displayName: Generate 430-1593
  #       env:
  #         MY_ACCESS_TOKEN: $(System.AccessToken)
  #       inputs:
  #         sourceFolder: bin/x86/$(BuildConfiguration)/en-US
  #         targetFolder: Raman Autosampler
  #         partNumberRoot: 430-1593

# todo: installation testing
# todo: integration testing
# todo: automated UI testing

  # Uncomment this entire stage if this build has part numbers to publish to the production file server
  # - stage: BlueStage
  #   displayName: Blue Stage
  #   condition: | # only run blue stage for the main and release branches
  #     and(
  #       succeeded(),
  #       or(
  #         eq(variables['Build.SourceBranch'], 'refs/heads/main'),
  #         startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/')
  #       )
  #     )
  #   variables:
  #     - group: 'Shared Release Variables'

  #   jobs:
  #     - job: BlueStage
  #       displayName: ' ' # This will be set by the matrix strategy

  #       strategy:
  #         matrix: # Create the matrix of descriptions and part numbers to publish
  #           Descriptive Name: # change this to a descriptive value for the UI
  #             PartNumberRoot: 430-1593 # actual part number root (no revision)

  #       steps:
  #         - task: DownloadPipelineArtifact@2
  #           inputs:
  #             buildType: 'current'
  #             artifactName: $(PartNumberRoot)
  #             targetPath: '$(Build.ArtifactStagingDirectory)/$(PartNumberRoot)'

  #         - task: blueStageTask@0
  #           inputs:
  #               PartNumberRoot: $(PartNumberRoot)
  #               ArtifactSourceFolder: '$(Build.ArtifactStagingDirectory)'
  #               RevisionIncrement: 1
